#!/usr/bin/env ruby
# encoding: utf-8

begin
require 'imposition'
#METHODS
def input(nombre)
  retorno=Hash.new
  STDOUT.puts(nombre)
  input=STDIN.gets
  if input[0]==10 then #no input
    retorno["numero"]=0.point
    retorno["unidad"]="point"#default
    return retorno    
  else
    regex = /(\d*\.*\d*)\s*(\w*)/
    split = regex.match(input)
    if split!=nil then
      retorno["numero"]=split[1].to_f
      if split[2]=="" then
        retorno["unidad"]="point"#default
      else
        retorno["unidad"]=Metodos.input2alchemist(split[2])
      end
      return retorno
    else
      puts I18n.t(:badunit, :input => input)
      input(nombre)
    end
  end
end
#
def enBooklets()
  STDOUT.puts(I18n.t(:bookletsq))
    bookies=STDIN.gets.to_s
  if bookies[0].eql?("y") then
    return true
  elsif bookies[0].eql?("n") then
    return false
  else
    enBooklets()
  end
end
#
def exigePar(nX)
  nX=input("nX:")
  nX=nX["numero"]
  if nX%2!=0 then
    exigePar(nX)
  end
  return nX     
end
#
def escalado(tipo)
  if tipo=="horizontalmente" then
    puts I18n.t(:WnX)+" "+I18n.t(tipo) 
  else
    puts I18n.t(:HnY)+" "+I18n.t(tipo)
  end

  puts(I18n.t(:scale, :tp=>I18n.t(tipo)))
    escalar=STDIN.gets.to_s
  if escalar[0].eql?("y") then
    return true
  elsif escalar[0].eql?("n") then
    return false
  else
    escalado(tipo)
  end
end
#
def todasPag(nPliegos, nX, nY, caben, tiene)
  #TODO rm? STDOUT.puts("el pdf tiene #{tiene.to_i} paginas, pero en #{nPliegos.to_i} de #{nX}x#{nY} caben #{caben.to_i} paginas Â¿usar las del pdf? (y/n)")
    escalar=STDIN.gets.to_s
  if escalar[0].eql?("y") then
    return true
  elsif escalar[0].eql?("n") then
    return false
  else
    todasPag(nPliegos, nX, nY, caben, tiene)
  end
end
#
def reducirUltimo(cuadernillosPorCostura, paginasSobran, nCuad, sobranMenos)
  puts I18n.t(:excesscXC, :cXC=>cuadernillosPorCostura, :p=>paginasSobran)
  puts I18n.t(:reducecXC, :nCuad=>nCuad,:sobranMenos=>sobranMenos)
  ok=STDIN.gets.to_s
  if ok[0].eql?("y") then
    return true
  elsif ok[0].eql?("n") then
    return false
  else
    reducirUltimo(cuadernillosPorCostura, paginasSobran, nCuad, sobranMenos)
  end
end

########
#CONSOLA
#
$entrada=ARGV.shift
$salida=ARGV.shift
$locale=ARGV.shift

if $locale!=nil then
	I18n.locale=$locale.strip
else
	I18n.locale = :en
end

#
Metodos.refresh()
#
check=Metodos.checksRun($entrada,$salida)
if check.instance_of? Clases::Mensaje then
  puts check.mensaje
  exit
end
#
puts I18n.t('welcome')#blink blink
#
w_=input("w:")
h_=input("h:")
wP_=input("W:")
hP_=input("H:")
nX_=input("nX:")
nY_=input("nY:")
nPaginas_=input(I18n.t(:nPages)+":")
nPliegos_=input(I18n.t(:nSheets)+":")
cuadernillos = enBooklets()
#
def recursivo(w_,h_,wP_,hP_,nX,nY,nPaginas,nPliegos,cuadernillos, preguntas)
  impostor=Metodos.funcionar(w_,h_,wP_,hP_,nX,nY,nPaginas,nPliegos,cuadernillos,preguntas,$temp,nil)
  if impostor.preguntasOk then
    if impostor.valido then
      puts I18n.t(:msgs)#blink blink
      impostor.mensajes.each do |mensaje|
        puts mensaje.mensaje
      end
    else
      impostor.errores().each do |error|
        puts error.mensaje
      end
      puts I18n.t(:dead)
      exit
    end
  else
    if impostor.preguntas["par"]!=nil and !impostor.preguntas["par"].ok then
      puts impostor.preguntas["par"].mensaje
      impostor.preguntas["par"].metodo(exigePar(nX))
      recursivo(w_,h_,wP_,hP_,nX,nY,nPaginas,nPliegos,cuadernillos,impostor.preguntas)
    elsif impostor.preguntas["cXC"]!=nil and !impostor.preguntas["cXC"].ok then
      puts impostor.preguntas["cXC"].mensaje
      impostor.preguntas["cXC"].metodo(input("cXC:"))
      recursivo(w_,h_,wP_,hP_,nX,nY,nPaginas,nPliegos,cuadernillos,impostor.preguntas)
    elsif impostor.preguntas["escaladoH"]!=nil and !impostor.preguntas["escaladoH"].ok then
      puts !impostor.preguntas["escaladoH"].mensaje
      impostor.preguntas["escaladoH"].metodo(escalado(impostor.preguntas["escaladoH"].tipo))
      impostor.preguntas["escaladoH"].ok=true
      recursivo(w_,h_,wP_,hP_,nX,nY,nPaginas,nPliegos,cuadernillos,impostor.preguntas)
    elsif impostor.preguntas["escaladoV"]!=nil and !impostor.preguntas["escaladoV"].ok then
      puts impostor.preguntas["escaladoV"].mensaje
      impostor.preguntas["escaladoV"].metodo(escalado(impostor.preguntas["escaladoV"].tipo))
      recursivo(w_,h_,wP_,hP_,nX,nY,nPaginas,nPliegos,cuadernillos,impostor.preguntas)
    elsif impostor.preguntas["todasPag"]!=nil and !impostor.preguntas["todasPag"].ok then
      puts impostor.preguntas["todasPag"].mensaje
      impostor.preguntas["todasPag"].metodo(todasPag(impostor.preguntas["todasPag"].nPliegos, impostor.preguntas["todasPag"].nX, impostor.preguntas["todasPag"].nY, impostor.preguntas["todasPag"].caben, impostor.preguntas["todasPag"].tiene))
      recursivo(w_,h_,wP_,hP_,nX,nY,nPaginas,nPliegos,cuadernillos,impostor.preguntas)
    elsif impostor.preguntas["reducir"]!=nil and !impostor.preguntas["reducir"].ok then
      puts impostor.preguntas["reducir"].mensaje
      impostor.preguntas["reducir"].metodo(reducirUltimo(impostor.preguntas["reducir"].cuadernillosPorCostura, impostor.preguntas["reducir"].paginasSobran, impostor.preguntas["reducir"].nCuad, impostor.preguntas["reducir"].sobranMenos))
      recursivo(w_,h_,wP_,hP_,nX,nY,nPaginas,nPliegos,cuadernillos,impostor.preguntas)
    end
  end
end
recursivo(w_,h_,wP_,hP_,nX_,nY_,nPaginas_,nPliegos_,cuadernillos, nil)
#lo devuelvo
if $salida == nil then
  $salida=$entrada
end
FileUtils.mv(File.dirname($temp)+"/"+"cutStack.pdf", $salida)
#
puts I18n.t(:end)#blink blink
ensure
  #limpio todo, aunque se caiga
  if File.dirname($temp)!=nil then
    `rm -r #{File.dirname($temp)}`
  end
end
#GAME OVER